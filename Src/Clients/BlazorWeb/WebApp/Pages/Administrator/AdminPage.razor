@page "/administrator";

@if(!ShowPage)
{
    <div class="login-container">
        <div class="row justify-content-center align-items-start h-100">
            <div class="login-form col-sm-4">
                <div class="form-group">
                    <input @bind-value="@Password" class="form-control" type="password" placeholder="Password" />
                </div>
                <br />
                <div class="form-group">
                    <button class="btn btn-sm btn-primary" @onclick="@OnClick">Login Admin Page</button>
                </div>
            </div>
        </div>
    </div>
}


@if(ShowPage)
{
    <div class="row">
        <div class="col-sm-6">
            <table class="table table-striped table-hover" style="background-color:azure">
                <thead>
                    <tr>
                        <th width="80%">Entry Tags</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var tag in tags)
                    {
                        <tr>
                            <td>@tag.Name</td>
                            <td><button class="btn btn-sm btn-primary" @onclick="() => OnUpdateBtnClick(tag.Id)">Update</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@if(ShowUpdateModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update Entry Tag</h5>
                    <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="@Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@UpdateTag" OnValidSubmit="@UpdateTagClicked">
                        <div class="entry-comment-add-container">
                            <div class="entry-comment-add">
                                <InputText class="form-control" @bind-Value="UpdateTag.Name" />

                                <div class="entry-comment-actions">
                                    <input type="submit" class="btn btn-sm btn-success" value="Save change" />
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    [Inject]
    IIdentityService identityService { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    ITagService tagService { get; set; }

    private string Password;
    private bool ShowPage;
    private string AdminPassword;
    private bool ShowUpdateModal;

    private List<GetTagsViewModel> tags = new();

    private UpdateTagCommand UpdateTag = new();

    protected override async void OnInitialized()
    {
        AdminPassword = identityService.GetAdminPassword();

        await RefreshTags();
    }

    private async Task RefreshTags()
    {
        tags = await tagService.GetTags();

        StateHasChanged();
    }

    private void OnUpdateBtnClick(Guid tagId)
    {
        UpdateTag.Id = tagId;

        UpdateTag.Name = tags.FirstOrDefault(x => x.Id == tagId).Name;

        ShowUpdateModal = true;

        StateHasChanged();
    }

    private async void UpdateTagClicked()
    {
        await tagService.UpdateTag(UpdateTag);

        Close();

        await RefreshTags();
    }

    private void OnClick()
    {
        if(AdminPassword == Password)
            ShowPage = true;
        else
            navigationManager.NavigateTo("/");
    }

    private void Close()
    {
        ShowUpdateModal = false;

        StateHasChanged();
    }
}
