<div class="modal-backdrop show"></div>
<div class="modal" tabindex="-1" role="dialog" style="display:block;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Your Comment</h5>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="@Close"></button>
            </div>
            <div class="modal-body">
                <p style="color:red">
                    @EntryCommentContent
                </p>
                <p>
                    Are you sure you want to delete your comment?
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm btn-danger" @onclick="@Delete">Yes, Delete!</button>
                <button type="button" class="btn btn-sm btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Guid EntryCommentId { get; set; }

    [Parameter]
    public string EntryCommentContent { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<EntryCommentClickedEventArgs> OnDeleteClicked { get; set; }

    public async void Delete()
    {
        var eventArgs = new EntryCommentClickedEventArgs();
        eventArgs.EntryCommentId = EntryCommentId;

        await OnDeleteClicked.InvokeAsync(eventArgs);

        Close();

        StateHasChanged();
    }

    public async void Close()
    {
        await OnClose.InvokeAsync(false);
    }
}
